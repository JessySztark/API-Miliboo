// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Miliboo.Models.EntityFramework;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Miliboo.Migrations
{
    [DbContext(typeof(MilibooDBContext))]
    partial class MilibooDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("SEQ_Account")
                .StartsAt(101L);

            modelBuilder.HasSequence<int>("SEQ_Address")
                .StartsAt(251L);

            modelBuilder.HasSequence<int>("SEQ_Color")
                .StartsAt(23L);

            modelBuilder.HasSequence<int>("SEQ_Comment")
                .StartsAt(14L);

            modelBuilder.HasSequence<int>("SEQ_CompositeProduct")
                .StartsAt(18L);

            modelBuilder.HasSequence<int>("SEQ_Concerned")
                .StartsAt(39L);

            modelBuilder.HasSequence<int>("SEQ_Country")
                .StartsAt(215L);

            modelBuilder.HasSequence<int>("SEQ_CreditCard")
                .StartsAt(39L);

            modelBuilder.HasSequence<int>("SEQ_DeliveryAdress")
                .StartsAt(35L);

            modelBuilder.HasSequence<int>("SEQ_DeliveryMethod")
                .StartsAt(4L);

            modelBuilder.HasSequence<int>("SEQ_Discount")
                .StartsAt(6L);

            modelBuilder.HasSequence<int>("SEQ_Filter")
                .StartsAt(50L);

            modelBuilder.HasSequence<int>("SEQ_FilterCategory")
                .StartsAt(37L);

            modelBuilder.HasSequence<int>("SEQ_Grouping")
                .StartsAt(4L);

            modelBuilder.HasSequence<int>("SEQ_IsFiltered")
                .StartsAt(79L);

            modelBuilder.HasSequence<int>("SEQ_Order")
                .StartsAt(38L);

            modelBuilder.HasSequence<int>("SEQ_PaymentMethod")
                .StartsAt(4L);

            modelBuilder.HasSequence<int>("SEQ_Photo")
                .StartsAt(66L);

            modelBuilder.HasSequence<int>("SEQ_Product")
                .StartsAt(51L);

            modelBuilder.HasSequence<int>("SEQ_ProductCategory")
                .StartsAt(39L);

            modelBuilder.HasSequence<int>("SEQ_ProductType")
                .StartsAt(18L);

            modelBuilder.HasSequence<int>("SEQ_Regroup")
                .StartsAt(20L);

            modelBuilder.HasSequence<int>("SEQ_StateOrder")
                .StartsAt(9L);

            modelBuilder.HasSequence<int>("SEQ_TechnicalAspect")
                .StartsAt(20L);

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("act_id")
                        .HasDefaultValueSql("nextval(SEQ_Account)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("act_firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("act_lastname");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("act_mail");

                    b.Property<bool>("Oath")
                        .HasColumnType("bool")
                        .HasColumnName("act_oath");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar")
                        .HasColumnName("act_password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("char(10)")
                        .HasColumnName("act_phonenumber");

                    b.HasKey("AccountID")
                        .HasName("pk_accountid");

                    b.HasIndex("Mail")
                        .IsUnique();

                    b.ToTable("t_e_account_act");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("adr_id")
                        .HasDefaultValueSql("nextval(SEQ_Address)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("adr_city");

                    b.Property<int>("CountryID")
                        .HasColumnType("integer")
                        .HasColumnName("cnt_id");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric(38,17)")
                        .HasColumnName("adr_latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric(38,17)")
                        .HasColumnName("adr_longitude");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("adr_postalcode");

                    b.Property<string>("Wording")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("adr_wording");

                    b.HasKey("AddressID")
                        .HasName("pk_addressid");

                    b.HasIndex("CountryID");

                    b.ToTable("t_e_address_adr");

                    b.HasCheckConstraint("CK_ADDR_POSTALCODE", "adr_postalcode::text ~ '^[0-9]{5}$'::text");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.AsAspect", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("prt_id");

                    b.Property<int>("TechnicalAspectId")
                        .HasColumnType("integer")
                        .HasColumnName("tas_id");

                    b.Property<string>("AspectDescription")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tas_technicalAspectName");

                    b.HasKey("ProductTypeId", "TechnicalAspectId")
                        .HasName("pk_asaspect");

                    b.HasIndex("TechnicalAspectId");

                    b.ToTable("t_j_asaspect_asa");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.AsFilter", b =>
                {
                    b.Property<int>("FilterCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("fca_id");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("prc_id");

                    b.HasKey("FilterCategoryId", "ProductCategoryId")
                        .HasName("pk_asfilter");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("t_j_asfilter_aft");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cl_id")
                        .HasDefaultValueSql("nextval(SEQ_Color)");

                    b.Property<string>("ColorHexaCode")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("clr_colorHexaCode");

                    b.Property<string>("ColorName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("clr_colorName");

                    b.HasKey("ColorId")
                        .HasName("pk_color");

                    b.ToTable("t_e_color_clr");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cmt_id")
                        .HasDefaultValueSql("nextval(SEQ_Comment)");

                    b.Property<int>("AccountID")
                        .HasColumnType("integer")
                        .HasColumnName("act_id");

                    b.Property<string>("Answer")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("cmt_answer");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateTime(2023, 4, 4, 17, 37, 54, 227, DateTimeKind.Local).AddTicks(5852))
                        .HasColumnName("cmt_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("cmt_description");

                    b.Property<int?>("Mark")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("cmt_mark");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("prt_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("cmt_title");

                    b.HasKey("CommentID")
                        .HasName("pk_commentid");

                    b.HasIndex("AccountID");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("t_e_comment_cmt");

                    b.HasCheckConstraint("CK_COMMENT_MARK", "cmt_mark >=0 AND cmt_mark <=4");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.CompositeProduct", b =>
                {
                    b.Property<int>("CompositeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cpr_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompositeID"));

                    b.Property<string>("CompositeDescription")
                        .HasColumnType("text")
                        .HasColumnName("cpr_compositedescription");

                    b.Property<int>("CompositeproductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cpr_compositeproductid")
                        .HasDefaultValueSql("nextval(SEQ_CompositeproductID)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("prd_id");

                    b.HasKey("CompositeID");

                    b.HasIndex("ProductId");

                    b.ToTable("t_e_compositeproduct_cpr");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Concerned", b =>
                {
                    b.Property<int>("ConcernedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("coc_id")
                        .HasDefaultValueSql("nextval(SEQ_Concerned)");

                    b.Property<int>("OrderID")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("coc_quantity");

                    b.HasKey("ConcernedId")
                        .HasName("pk_concerned");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductId");

                    b.ToTable("t_j_concerned_coc");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cnt_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CountryID"));

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar")
                        .HasColumnName("cnt_phonecode");

                    b.Property<string>("Wording")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("cnt_wording");

                    b.HasKey("CountryID")
                        .HasName("pk_countryid");

                    b.ToTable("t_e_country_cnt");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.CreditCard", b =>
                {
                    b.Property<int>("CardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("crc_cardid")
                        .HasDefaultValueSql("nextval(SEQ_CreditCard)");

                    b.Property<int>("AccountID")
                        .HasColumnType("integer")
                        .HasColumnName("crc_accountid");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("crc_cardnumber");

                    b.Property<string>("Cryptogram")
                        .HasColumnType("varchar(3)")
                        .HasColumnName("crc_cryptogram");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("crc_expirationdate");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("crc_firstname");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("crc_name");

                    b.HasKey("CardID")
                        .HasName("pk_creditcard");

                    b.HasIndex("AccountID");

                    b.ToTable("t_e_creditcard_crc");

                    b.HasCheckConstraint("CK_CRC_CRYPTOGRAM", "crc_cryptogram::text ~ '^[0-9]{3}$'::text");

                    b.HasCheckConstraint("Ck_creditcard_date", "crc_expirationdate > now()");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.DeliveryAdress", b =>
                {
                    b.Property<int>("IdDeliveryAdress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("dla_iddeliveryadress")
                        .HasDefaultValueSql("nextval(SEQ_DeliveryAdress)");

                    b.Property<int>("AccountID")
                        .HasColumnType("integer")
                        .HasColumnName("act_id");

                    b.Property<string>("FavAdressName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dla_favadressname");

                    b.HasKey("IdDeliveryAdress")
                        .HasName("pk_deliveryadress");

                    b.ToTable("t_e_deliveryadress_dla");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.DeliveryMethod", b =>
                {
                    b.Property<int>("IdDeliveryMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("dlm_id")
                        .HasDefaultValueSql("nextval(SEQ_DeliveryMethod)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dlm_description");

                    b.HasKey("IdDeliveryMethod")
                        .HasName("pk_deliverymethod");

                    b.ToTable("t_e_deliverymethod_dlm");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Discount", b =>
                {
                    b.Property<int>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("dsc_discountid")
                        .HasDefaultValueSql("nextval(SEQ_Discount)");

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("dsc_discountname");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal")
                        .HasColumnName("dsc_value");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bool")
                        .HasColumnName("dsc_isactive");

                    b.HasKey("DiscountID")
                        .HasName("pk_discount");

                    b.ToTable("t_e_discount_dsc");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Filter", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("flt_id")
                        .HasDefaultValueSql("nextval(SEQ_Filter)");

                    b.Property<int>("FilterCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("FilterName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("flt_filterName");

                    b.HasKey("FilterId")
                        .HasName("pk_filter");

                    b.HasIndex("FilterCategoryId");

                    b.ToTable("t_e_filter_flt");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.FilterCategory", b =>
                {
                    b.Property<int>("FilterCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("fca_id")
                        .HasDefaultValueSql("nextval(SEQ_FilterCategory)");

                    b.Property<string>("FilterCategoryName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fca_filterCategoryName");

                    b.HasKey("FilterCategoryId")
                        .HasName("pk_filtercategory");

                    b.ToTable("t_e_filtercategory_fca");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Grouping", b =>
                {
                    b.Property<int>("GroupingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasDefaultValueSql("nextval(SEQ_Grouping)");

                    b.Property<string>("GroupingName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("grp_groupingName");

                    b.HasKey("GroupingId")
                        .HasName("pk_grouping");

                    b.ToTable("t_e_grouping_grp");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.IsFiltered", b =>
                {
                    b.Property<int>("IsFilteredId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ift_id")
                        .HasDefaultValueSql("nextval(SEQ_IsFiltered)");

                    b.Property<int>("FilterId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("IsFilteredId")
                        .HasName("pk_isfiltered");

                    b.HasIndex("FilterId");

                    b.HasIndex("ProductId");

                    b.ToTable("t_j_isfiltered_ift");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ord_id")
                        .HasDefaultValueSql("nextval(SEQ_Order)");

                    b.Property<int>("AccountID")
                        .HasColumnType("integer")
                        .HasColumnName("act_id");

                    b.Property<string>("AdressAdditional")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ord_adressadditional");

                    b.Property<int>("CardID")
                        .HasColumnType("integer")
                        .HasColumnName("crc_cardid");

                    b.Property<string>("CellPhone")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ord_cellphone");

                    b.Property<string>("Company")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ord_company");

                    b.Property<float>("DeliveryPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f)
                        .HasColumnName("ord_deliveryprice");

                    b.Property<int?>("DiscountID")
                        .HasColumnType("integer")
                        .HasColumnName("dsc_discountid");

                    b.Property<int>("IdDeliveryAdress")
                        .HasColumnType("integer")
                        .HasColumnName("dla_iddeliveryadress");

                    b.Property<int>("IdDeliveryMethod")
                        .HasColumnType("integer")
                        .HasColumnName("dlv_iddeliverymethod");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateTime(2023, 4, 4, 17, 37, 54, 227, DateTimeKind.Local).AddTicks(6640))
                        .HasColumnName("ord_date");

                    b.Property<string>("OrderFirstName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ord_firstname");

                    b.Property<string>("OrderInstructions")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ord_instructions");

                    b.Property<string>("OrderName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ord_name");

                    b.Property<int>("Paymentmethodid")
                        .HasColumnType("integer")
                        .HasColumnName("pay_paymentmethodid");

                    b.Property<string>("PhoneOrder")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ord_phone");

                    b.Property<bool>("Sms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ord_sms");

                    b.Property<int>("StateOrderID")
                        .HasColumnType("integer")
                        .HasColumnName("sto_stateorderid")
                        .HasColumnOrder(1);

                    b.HasKey("OrderID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CardID");

                    b.HasIndex("DiscountID");

                    b.HasIndex("IdDeliveryAdress");

                    b.HasIndex("IdDeliveryMethod");

                    b.HasIndex("Paymentmethodid");

                    b.HasIndex("StateOrderID");

                    b.ToTable("t_e_order_ord");

                    b.HasCheckConstraint("Ck_order_date", "ord_date > now()");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Owning", b =>
                {
                    b.Property<int>("AddressID")
                        .HasColumnType("integer");

                    b.Property<int>("AccountID")
                        .HasColumnType("integer");

                    b.HasKey("AddressID", "AccountID")
                        .HasName("pk_owning_addressid_accountid");

                    b.HasIndex("AccountID");

                    b.ToTable("t_j_owning_own");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.PaymentMethod", b =>
                {
                    b.Property<int>("Paymentmethodid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pay_paymentmethodid")
                        .HasDefaultValueSql("nextval(SEQ_PaymentMethod)");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("pay_methodname");

                    b.HasKey("Paymentmethodid")
                        .HasName("pk_paymentmethod");

                    b.ToTable("t_e_paymentmethod_pay");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Photo", b =>
                {
                    b.Property<int>("PhotoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pht_id")
                        .HasDefaultValueSql("nextval(SEQ_Photo)");

                    b.Property<int?>("CommentID")
                        .HasColumnType("integer");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("pht_link");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("PhotoID")
                        .HasName("pk_photo_photoid");

                    b.HasIndex("CommentID");

                    b.HasIndex("ProductId");

                    b.ToTable("t_e_photo_pht");

                    b.HasCheckConstraint("CK_PHOTO_LINK", "pht_link::text ~ '^.*.(?:jpg|gif|png|webm|jpeg|ico|webp)$'::text");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Product", b =>
                {
                    b.Property<int?>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("prd_id")
                        .HasDefaultValueSql("nextval(SEQ_Product)");

                    b.Property<int>("ColorId")
                        .HasColumnType("integer");

                    b.Property<int>("NbReservedProduct")
                        .HasColumnType("integer")
                        .HasColumnName("prd_nbReservedProduct");

                    b.Property<int>("NbStockProduct")
                        .HasColumnType("integer")
                        .HasColumnName("prd_nbStockProduct");

                    b.Property<int>("ProducTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar")
                        .HasColumnName("prd_productDescription");

                    b.Property<double>("ProductDiscount")
                        .HasColumnType("double precision")
                        .HasColumnName("prd_productDiscount");

                    b.Property<string>("ProductName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("prd_productName");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("prd_productPrice");

                    b.HasKey("ProductId")
                        .HasName("pk_product");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProducTypeId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("t_e_product_prd");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("prc_id")
                        .HasDefaultValueSql("nextval(SEQ_ProductCategory)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("prc_parentCategoryID");

                    b.Property<string>("ProductCategoryName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("prc_productCategoryName");

                    b.HasKey("ProductCategoryId")
                        .HasName("pk_productcategory");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("t_e_productcategory_prc");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("prt_id")
                        .HasDefaultValueSql("nextval(SEQ_ProductType)");

                    b.Property<string>("PTMaintenanceComment")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("prt_maintenanceCommentPT");

                    b.Property<string>("ProductTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("prt_productTypeName");

                    b.HasKey("ProductTypeId")
                        .HasName("pk_producttype");

                    b.ToTable("t_e_producttype_prt");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Regroup", b =>
                {
                    b.Property<int>("RegroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasDefaultValueSql("nextval(SEQ_Regroup)");

                    b.Property<int>("GroupingId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("RegroupId")
                        .HasName("pk_regroup");

                    b.HasIndex("GroupingId");

                    b.HasIndex("ProductId");

                    b.ToTable("t_j_regroup_rgp");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.StateOrder", b =>
                {
                    b.Property<int>("StateOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sto_stateorderid")
                        .HasDefaultValueSql("nextval(SEQ_StateOrder)");

                    b.Property<string>("StateOrderName")
                        .HasColumnType("text")
                        .HasColumnName("sto_stateordername");

                    b.HasKey("StateOrderID")
                        .HasName("pk_stateorder");

                    b.ToTable("t_e_stateorder_sto");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.TechnicalAspect", b =>
                {
                    b.Property<int>("TechnicalAspectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tas_id")
                        .HasDefaultValueSql("nextval(SEQ_TechnicalAspect)");

                    b.Property<string>("TechnicalAspectName")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("tas_technicalAspectName");

                    b.HasKey("TechnicalAspectId")
                        .HasName("pk_technicalaspect");

                    b.ToTable("t_e_technicalaspect_tas");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Address", b =>
                {
                    b.HasOne("Miliboo.Models.EntityFramework.Country", "CountryAdress")
                        .WithMany("AddressCountry")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_adr_cnt");

                    b.Navigation("CountryAdress");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.AsAspect", b =>
                {
                    b.HasOne("Miliboo.Models.EntityFramework.ProductType", "ProductTypesNavigation")
                        .WithMany("AsAspectsProductType")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_producttype_asaspect");

                    b.HasOne("Miliboo.Models.EntityFramework.TechnicalAspect", "TechnicalAspectsNavigation")
                        .WithMany("AsAspectsTechnicalAspect")
                        .HasForeignKey("TechnicalAspectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_techaspect_asaspect");

                    b.Navigation("ProductTypesNavigation");

                    b.Navigation("TechnicalAspectsNavigation");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.AsFilter", b =>
                {
                    b.HasOne("Miliboo.Models.EntityFramework.FilterCategory", "FiltersCategoryNavigation")
                        .WithMany("AsFiltersFilterCategory")
                        .HasForeignKey("FilterCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_filtercat_asfilter");

                    b.HasOne("Miliboo.Models.EntityFramework.ProductCategory", "ProductCategoriesNavigation")
                        .WithMany("AsFiltersProductCategory")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_productcat_asfilter");

                    b.Navigation("FiltersCategoryNavigation");

                    b.Navigation("ProductCategoriesNavigation");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Comment", b =>
                {
                    b.HasOne("Miliboo.Models.EntityFramework.Account", "CommentsAccount")
                        .WithMany("AccountComments")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_account");

                    b.HasOne("Miliboo.Models.EntityFramework.ProductType", "TypeComments")
                        .WithMany("CommentsType")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_productcat_asfilter");

                    b.Navigation("CommentsAccount");

                    b.Navigation("TypeComments");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.CompositeProduct", b =>
                {
                    b.HasOne("Miliboo.Models.EntityFramework.Product", "ProductCompositeProduct")
                        .WithMany("ProductsCompositeProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_productcomposite");

                    b.Navigation("ProductCompositeProduct");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Concerned", b =>
                {
                    b.HasOne("Miliboo.Models.EntityFramework.Order", "OrdersNavigation")
                        .WithMany("OrdersConcerned")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_concerned");

                    b.HasOne("Miliboo.Models.EntityFramework.Product", "ProductsNavigation")
                        .WithMany("ProductsConcerned")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_concerned");

                    b.Navigation("OrdersNavigation");

                    b.Navigation("ProductsNavigation");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.CreditCard", b =>
                {
                    b.HasOne("Miliboo.Models.EntityFramework.Account", "AccountCreditCard")
                        .WithMany("CreditCardAccount")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountCreditCard");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Filter", b =>
                {
                    b.HasOne("Miliboo.Models.EntityFramework.FilterCategory", "FiltersCategoryNavigation")
                        .WithMany("FilterFiltersCategory")
                        .HasForeignKey("FilterCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_filter_filtercategory");

                    b.Navigation("FiltersCategoryNavigation");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.IsFiltered", b =>
                {
                    b.HasOne("Miliboo.Models.EntityFramework.Filter", "FiltersNavigation")
                        .WithMany("FiltersIsFiltered")
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_filter_isfiltered");

                    b.HasOne("Miliboo.Models.EntityFramework.Product", "ProductsNavigation")
                        .WithMany("ProductsIsFiltered")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_isfiltered");

                    b.Navigation("FiltersNavigation");

                    b.Navigation("ProductsNavigation");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Order", b =>
                {
                    b.HasOne("Miliboo.Models.EntityFramework.Account", "AccountOrder")
                        .WithMany("OrderAccount")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_account");

                    b.HasOne("Miliboo.Models.EntityFramework.CreditCard", "CreditCardOrder")
                        .WithMany("OrderCreditCard")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_creditcard");

                    b.HasOne("Miliboo.Models.EntityFramework.Discount", "DiscountOrder")
                        .WithMany("OrderDiscount")
                        .HasForeignKey("DiscountID")
                        .HasConstraintName("fk_order_discount");

                    b.HasOne("Miliboo.Models.EntityFramework.DeliveryAdress", "DeliveryAdressOrder")
                        .WithMany("OrderDeliveryAdress")
                        .HasForeignKey("IdDeliveryAdress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_deliveryaddress");

                    b.HasOne("Miliboo.Models.EntityFramework.DeliveryMethod", "DeliveryMethodOrder")
                        .WithMany("OrderDeliveryMethod")
                        .HasForeignKey("IdDeliveryMethod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_deliverymethod");

                    b.HasOne("Miliboo.Models.EntityFramework.PaymentMethod", "PaymentMethodOrder")
                        .WithMany("OrderPaymentMethod")
                        .HasForeignKey("Paymentmethodid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_paymentmethod");

                    b.HasOne("Miliboo.Models.EntityFramework.StateOrder", "StateOrderOrder")
                        .WithMany("OrderStateOrder")
                        .HasForeignKey("StateOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_stateorder");

                    b.Navigation("AccountOrder");

                    b.Navigation("CreditCardOrder");

                    b.Navigation("DeliveryAdressOrder");

                    b.Navigation("DeliveryMethodOrder");

                    b.Navigation("DiscountOrder");

                    b.Navigation("PaymentMethodOrder");

                    b.Navigation("StateOrderOrder");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Owning", b =>
                {
                    b.HasOne("Miliboo.Models.EntityFramework.Account", "OwnerAccount")
                        .WithMany("Addresses")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owning_account");

                    b.HasOne("Miliboo.Models.EntityFramework.Address", "AddressOwned")
                        .WithMany("Owners")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owning_address");

                    b.Navigation("AddressOwned");

                    b.Navigation("OwnerAccount");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Photo", b =>
                {
                    b.HasOne("Miliboo.Models.EntityFramework.Comment", "CommentPhoto")
                        .WithMany("PhotoComment")
                        .HasForeignKey("CommentID")
                        .HasConstraintName("fk_photo_comment");

                    b.HasOne("Miliboo.Models.EntityFramework.Product", "ProductPhoto")
                        .WithMany("PhotoProduct")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_photo_product");

                    b.Navigation("CommentPhoto");

                    b.Navigation("ProductPhoto");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Product", b =>
                {
                    b.HasOne("Miliboo.Models.EntityFramework.Color", "ColorsNavigation")
                        .WithMany("ColorsProduct")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_color");

                    b.HasOne("Miliboo.Models.EntityFramework.ProductType", "ProductTypesNavigation")
                        .WithMany("ProductTypesProduct")
                        .HasForeignKey("ProducTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_typeproduct");

                    b.HasOne("Miliboo.Models.EntityFramework.ProductCategory", "ProductCategoriesNavigation")
                        .WithMany("ProductCategoriesProduct")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_catproduct");

                    b.Navigation("ColorsNavigation");

                    b.Navigation("ProductCategoriesNavigation");

                    b.Navigation("ProductTypesNavigation");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.ProductCategory", b =>
                {
                    b.HasOne("Miliboo.Models.EntityFramework.ProductCategory", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("fk_productcat_productcat");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Regroup", b =>
                {
                    b.HasOne("Miliboo.Models.EntityFramework.Grouping", "GroupingsNavigation")
                        .WithMany("GroupingsRegroup")
                        .HasForeignKey("GroupingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_regroup_grouping");

                    b.HasOne("Miliboo.Models.EntityFramework.Product", "ProductsNavigation")
                        .WithMany("ProductsRegroup")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_regroup_product");

                    b.Navigation("GroupingsNavigation");

                    b.Navigation("ProductsNavigation");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Account", b =>
                {
                    b.Navigation("AccountComments");

                    b.Navigation("Addresses");

                    b.Navigation("CreditCardAccount");

                    b.Navigation("OrderAccount");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Address", b =>
                {
                    b.Navigation("Owners");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Color", b =>
                {
                    b.Navigation("ColorsProduct");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Comment", b =>
                {
                    b.Navigation("PhotoComment");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Country", b =>
                {
                    b.Navigation("AddressCountry");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.CreditCard", b =>
                {
                    b.Navigation("OrderCreditCard");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.DeliveryAdress", b =>
                {
                    b.Navigation("OrderDeliveryAdress");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.DeliveryMethod", b =>
                {
                    b.Navigation("OrderDeliveryMethod");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Discount", b =>
                {
                    b.Navigation("OrderDiscount");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Filter", b =>
                {
                    b.Navigation("FiltersIsFiltered");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.FilterCategory", b =>
                {
                    b.Navigation("AsFiltersFilterCategory");

                    b.Navigation("FilterFiltersCategory");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Grouping", b =>
                {
                    b.Navigation("GroupingsRegroup");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Order", b =>
                {
                    b.Navigation("OrdersConcerned");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.PaymentMethod", b =>
                {
                    b.Navigation("OrderPaymentMethod");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.Product", b =>
                {
                    b.Navigation("PhotoProduct");

                    b.Navigation("ProductsCompositeProduct");

                    b.Navigation("ProductsConcerned");

                    b.Navigation("ProductsIsFiltered");

                    b.Navigation("ProductsRegroup");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.ProductCategory", b =>
                {
                    b.Navigation("AsFiltersProductCategory");

                    b.Navigation("ChildCategories");

                    b.Navigation("ProductCategoriesProduct");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.ProductType", b =>
                {
                    b.Navigation("AsAspectsProductType");

                    b.Navigation("CommentsType");

                    b.Navigation("ProductTypesProduct");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.StateOrder", b =>
                {
                    b.Navigation("OrderStateOrder");
                });

            modelBuilder.Entity("Miliboo.Models.EntityFramework.TechnicalAspect", b =>
                {
                    b.Navigation("AsAspectsTechnicalAspect");
                });
#pragma warning restore 612, 618
        }
    }
}
